name: algebraic-graphs
version: 0.3
id: algebraic-graphs-0.3-GMNCI0iOPDY8oGrd7FmxLZ
key: algebraic-graphs-0.3-GMNCI0iOPDY8oGrd7FmxLZ
license: MIT
copyright: Andrey Mokhov, 2016-2018
maintainer: Andrey Mokhov <andrey.mokhov@gmail.com>, github: @snowleopard,
            Alexandre Moine <alexandre@moine.me>, github: @nobrakal
stability: experimental
homepage: https://github.com/snowleopard/alga
synopsis: A library for algebraic graph construction and transformation
description:
    <https://github.com/snowleopard/alga Alga> is a library for algebraic construction and
    manipulation of graphs in Haskell. See <https://github.com/snowleopard/alga-paper this paper>
    for the motivation behind the library, the underlying theory and implementation details.
    .
    The top-level module
    <http://hackage.haskell.org/package/algebraic-graphs/docs/Algebra-Graph.html Algebra.Graph>
    defines the main data type for /algebraic graphs/
    <http://hackage.haskell.org/package/algebraic-graphs/docs/Algebra-Graph.html#t:Graph Graph>,
    as well as associated algorithms. For type-safe representation and
    manipulation of /non-empty algebraic graphs/, see
    <http://hackage.haskell.org/package/algebraic-graphs/docs/Algebra-Graph-NonEmpty.html Algebra.Graph.NonEmpty>.
    Furthermore, /algebraic graphs with edge labels/ are implemented in
    <http://hackage.haskell.org/package/algebraic-graphs/docs/Algebra-Graph-Labelled.html Algebra.Graph.Labelled>.
    .
    The library also provides conventional graph data structures, such as
    <http://hackage.haskell.org/package/algebraic-graphs/docs/Algebra-Graph-AdjacencyMap.html Algebra.Graph.AdjacencyMap>
    along with its various flavours: adjacency maps specialised to graphs with
    vertices of type 'Int'
    (<http://hackage.haskell.org/package/algebraic-graphs/docs/Algebra-Graph-AdjacencyIntMap.html Algebra.Graph.AdjacencyIntMap>),
    non-empty adjacency maps
    (<http://hackage.haskell.org/package/algebraic-graphs/docs/Algebra-Graph-NonEmpty-AdjacencyMap.html Algebra.Graph.NonEmpty.AdjacencyMap>),
    and adjacency maps with edge labels
    (<http://hackage.haskell.org/package/algebraic-graphs/docs/Algebra-Graph-Labelled-AdjacencyMap.html Algebra.Graph.Labelled.AdjacencyMap>).
    A large part of the API of algebraic graphs and adjacency maps is available
    through the 'Foldable'-like type class
    <http://hackage.haskell.org/package/algebraic-graphs/docs/Algebra-Graph-ToGraph.html Algebra.Graph.ToGraph>.
    .
    The type classes defined in
    <http://hackage.haskell.org/package/algebraic-graphs/docs/Algebra-Graph-Class.html Algebra.Graph.Class>
    and
    <http://hackage.haskell.org/package/algebraic-graphs/docs/Algebra-Graph-HigherKinded-Class.html Algebra.Graph.HigherKinded.Class>
    can be used for polymorphic construction and manipulation of graphs. Also see
    <http://hackage.haskell.org/package/algebraic-graphs/docs/Algebra-Graph-Fold.html Algebra.Graph.Fold>
    that defines the Boehm-Berarducci encoding of algebraic graphs.
    .
    This is an experimental library and the API is expected to remain unstable until version 1.0.0.
    Please consider contributing to the on-going
    <https://github.com/snowleopard/alga/issues discussions on the library API>.
category: Algebra, Algorithms, Data Structures, Graphs
author: Andrey Mokhov <andrey.mokhov@gmail.com>, github: @snowleopard
exposed: True
exposed-modules:
    Algebra.Graph Algebra.Graph.AdjacencyIntMap
    Algebra.Graph.AdjacencyIntMap.Algorithm
    Algebra.Graph.AdjacencyIntMap.Internal Algebra.Graph.AdjacencyMap
    Algebra.Graph.AdjacencyMap.Algorithm
    Algebra.Graph.AdjacencyMap.Internal Algebra.Graph.Class
    Algebra.Graph.Export Algebra.Graph.Export.Dot Algebra.Graph.Fold
    Algebra.Graph.HigherKinded.Class Algebra.Graph.Internal
    Algebra.Graph.Label Algebra.Graph.Labelled
    Algebra.Graph.Labelled.AdjacencyMap
    Algebra.Graph.Labelled.AdjacencyMap.Internal
    Algebra.Graph.Labelled.Example.Automaton
    Algebra.Graph.Labelled.Example.Network Algebra.Graph.NonEmpty
    Algebra.Graph.NonEmpty.AdjacencyMap
    Algebra.Graph.NonEmpty.AdjacencyMap.Internal Algebra.Graph.Relation
    Algebra.Graph.Relation.Internal
    Algebra.Graph.Relation.InternalDerived
    Algebra.Graph.Relation.Preorder Algebra.Graph.Relation.Reflexive
    Algebra.Graph.Relation.Symmetric Algebra.Graph.Relation.Transitive
    Algebra.Graph.ToGraph Data.Graph.Typed
abi: 0cbd08005a487f784404ea0ae45fab08
trusted: False
import-dirs: /homes/tz2617/wacc_32/.stack-work/install/x86_64-linux/ghc-8.0.2/8.0.2/lib/x86_64-linux-ghc-8.0.2/algebraic-graphs-0.3-GMNCI0iOPDY8oGrd7FmxLZ
library-dirs: /homes/tz2617/wacc_32/.stack-work/install/x86_64-linux/ghc-8.0.2/8.0.2/lib/x86_64-linux-ghc-8.0.2/algebraic-graphs-0.3-GMNCI0iOPDY8oGrd7FmxLZ
dynamic-library-dirs: /homes/tz2617/wacc_32/.stack-work/install/x86_64-linux/ghc-8.0.2/8.0.2/lib/x86_64-linux-ghc-8.0.2
data-dir: /homes/tz2617/wacc_32/.stack-work/install/x86_64-linux/ghc-8.0.2/8.0.2/share/x86_64-linux-ghc-8.0.2/algebraic-graphs-0.3
hs-libraries: HSalgebraic-graphs-0.3-GMNCI0iOPDY8oGrd7FmxLZ
depends:
    array-0.5.1.1 base-4.9.1.0 base-compat-0.10.5-3zaoBe0vBrBwuLLp8tD2A
    containers-0.5.7.1 deepseq-1.4.2.0 mtl-2.2.2-IUStvhCM9Fb6Pb0KlPCV7h
haddock-interfaces: /homes/tz2617/wacc_32/.stack-work/install/x86_64-linux/ghc-8.0.2/8.0.2/doc/algebraic-graphs-0.3/algebraic-graphs.haddock
haddock-html: /homes/tz2617/wacc_32/.stack-work/install/x86_64-linux/ghc-8.0.2/8.0.2/doc/algebraic-graphs-0.3
