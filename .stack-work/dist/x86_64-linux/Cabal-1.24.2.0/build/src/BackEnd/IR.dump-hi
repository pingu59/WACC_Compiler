
==================== FINAL INTERFACE ====================
2019-02-27 09:56:05.051156616 UTC

interface wacc32-0.1.0.0-3oOtzXerc607YIePR0qNZ2:BackEnd.IR 8002
  interface hash: b1417c62a8b67b9d8957ddc492d8d865
  ABI hash: 881b5c7113579e9e0196d2b90545a438
  export-list hash: 6d764dfdda2ad49e5da2751723ca6e76
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 02b3c746106ad76f793f89ebc1f71840
  sig of: Nothing
  used TH splices: False
  where
exports:
  BackEnd.IR.cleanStm
  BackEnd.IR.cleanStmExp
  BackEnd.IR.BOp{BackEnd.IR.AND BackEnd.IR.DIV BackEnd.IR.LSHIFT BackEnd.IR.MINUS BackEnd.IR.MOD BackEnd.IR.MUL BackEnd.IR.OR BackEnd.IR.PLUS BackEnd.IR.RSHIFT}
  BackEnd.IR.Exp{BackEnd.IR.BINEXP BackEnd.IR.CALL BackEnd.IR.CONSTC BackEnd.IR.CONSTI BackEnd.IR.ESEQ BackEnd.IR.MEM BackEnd.IR.NAME BackEnd.IR.TEMP}
  BackEnd.IR.ROp{BackEnd.IR.EQ BackEnd.IR.GE BackEnd.IR.GT BackEnd.IR.LE BackEnd.IR.LT BackEnd.IR.NE}
  BackEnd.IR.Stm{BackEnd.IR.CJUMP BackEnd.IR.EXP BackEnd.IR.JUMP BackEnd.IR.LABEL BackEnd.IR.MOV BackEnd.IR.NOP BackEnd.IR.POP BackEnd.IR.PUSH BackEnd.IR.SEQ}
  BackEnd.IR.Treeable{BackEnd.IR.toTree}
module dependencies: BackEnd.Temp
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      boxes-0.1.5@boxes-0.1.5-6DdHE3jJ0TwE6WTwMdCW4f
                      containers-0.5.7.1@containers-0.5.7.1*
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      pretty-tree-0.1.0.0@pretty-tree-0.1.0.0-5ldf01HzJj05FtOtje7CSt
                      split-0.2.3.3@split-0.2.3.3-KPq5EVv6rbi8XHTA0KJd3E
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Tree 934c8346abfc162444da25037e684c23
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  pretty-tree-0.1.0.0@pretty-tree-0.1.0.0-5ldf01HzJj05FtOtje7CSt:Data.Tree.Pretty 3ac5dddbfa495e0726fe4e4b66bf2547
import  -/  BackEnd.Temp 0c22f42d627493b2b3f13cd2a3ac5a46
  exports: ecf0e74365e1a70f2572e5197e175ea3
  Label ab7a275275a088fb10914e7eda58ce46
  Temp 14024289252e98b781eb5778cbac8848
c232f4131e5ba3b186ce94934966b167
  $fEqBOp :: GHC.Classes.Eq BackEnd.IR.BOp
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BackEnd.IR.BOp BackEnd.IR.$fEqBOp_$c== BackEnd.IR.$fEqBOp_$c/= -}
c232f4131e5ba3b186ce94934966b167
  $fEqBOp_$c/= :: BackEnd.IR.BOp -> BackEnd.IR.BOp -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: BackEnd.IR.BOp) (b :: BackEnd.IR.BOp) ->
                 case a of wild {
                   BackEnd.IR.PLUS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True BackEnd.IR.PLUS -> GHC.Types.False }
                   BackEnd.IR.MINUS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True BackEnd.IR.MINUS -> GHC.Types.False }
                   BackEnd.IR.MUL
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True BackEnd.IR.MUL -> GHC.Types.False }
                   BackEnd.IR.DIV
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True BackEnd.IR.DIV -> GHC.Types.False }
                   BackEnd.IR.AND
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True BackEnd.IR.AND -> GHC.Types.False }
                   BackEnd.IR.OR
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True BackEnd.IR.OR -> GHC.Types.False }
                   BackEnd.IR.LSHIFT
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True BackEnd.IR.LSHIFT -> GHC.Types.False }
                   BackEnd.IR.RSHIFT
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True BackEnd.IR.RSHIFT -> GHC.Types.False }
                   BackEnd.IR.MOD
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True BackEnd.IR.MOD -> GHC.Types.False } }) -}
c232f4131e5ba3b186ce94934966b167
  $fEqBOp_$c== :: BackEnd.IR.BOp -> BackEnd.IR.BOp -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: BackEnd.IR.BOp) (ds1 :: BackEnd.IR.BOp) ->
                 case ds of wild {
                   BackEnd.IR.PLUS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False BackEnd.IR.PLUS -> GHC.Types.True }
                   BackEnd.IR.MINUS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False BackEnd.IR.MINUS -> GHC.Types.True }
                   BackEnd.IR.MUL
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False BackEnd.IR.MUL -> GHC.Types.True }
                   BackEnd.IR.DIV
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False BackEnd.IR.DIV -> GHC.Types.True }
                   BackEnd.IR.AND
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False BackEnd.IR.AND -> GHC.Types.True }
                   BackEnd.IR.OR
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False BackEnd.IR.OR -> GHC.Types.True }
                   BackEnd.IR.LSHIFT
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False BackEnd.IR.LSHIFT -> GHC.Types.True }
                   BackEnd.IR.RSHIFT
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False BackEnd.IR.RSHIFT -> GHC.Types.True }
                   BackEnd.IR.MOD
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False BackEnd.IR.MOD -> GHC.Types.True } }) -}
29a6c3cd3ea133857ec2f8677caa5fe0
  $fEqExp :: GHC.Classes.Eq BackEnd.IR.Exp
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BackEnd.IR.Exp BackEnd.IR.$fEqExp_$c== BackEnd.IR.$fEqExp_$c/= -}
29a6c3cd3ea133857ec2f8677caa5fe0
  $fEqExp_$c/= :: BackEnd.IR.Exp -> BackEnd.IR.Exp -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: BackEnd.IR.Exp) (b :: BackEnd.IR.Exp) ->
                 case BackEnd.IR.$fEqExp_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
29a6c3cd3ea133857ec2f8677caa5fe0
  $fEqExp_$c== :: BackEnd.IR.Exp -> BackEnd.IR.Exp -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
2106592c3ca9d65fb59030dc1bff8b4a
  $fEqROp :: GHC.Classes.Eq BackEnd.IR.ROp
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BackEnd.IR.ROp BackEnd.IR.$fEqROp_$c== BackEnd.IR.$fEqROp_$c/= -}
2106592c3ca9d65fb59030dc1bff8b4a
  $fEqROp_$c/= :: BackEnd.IR.ROp -> BackEnd.IR.ROp -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: BackEnd.IR.ROp) (b :: BackEnd.IR.ROp) ->
                 case a of wild {
                   BackEnd.IR.EQ
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True BackEnd.IR.EQ -> GHC.Types.False }
                   BackEnd.IR.NE
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True BackEnd.IR.NE -> GHC.Types.False }
                   BackEnd.IR.LT
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True BackEnd.IR.LT -> GHC.Types.False }
                   BackEnd.IR.LE
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True BackEnd.IR.LE -> GHC.Types.False }
                   BackEnd.IR.GT
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True BackEnd.IR.GT -> GHC.Types.False }
                   BackEnd.IR.GE
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True BackEnd.IR.GE -> GHC.Types.False } }) -}
2106592c3ca9d65fb59030dc1bff8b4a
  $fEqROp_$c== :: BackEnd.IR.ROp -> BackEnd.IR.ROp -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: BackEnd.IR.ROp) (ds1 :: BackEnd.IR.ROp) ->
                 case ds of wild {
                   BackEnd.IR.EQ
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False BackEnd.IR.EQ -> GHC.Types.True }
                   BackEnd.IR.NE
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False BackEnd.IR.NE -> GHC.Types.True }
                   BackEnd.IR.LT
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False BackEnd.IR.LT -> GHC.Types.True }
                   BackEnd.IR.LE
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False BackEnd.IR.LE -> GHC.Types.True }
                   BackEnd.IR.GT
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False BackEnd.IR.GT -> GHC.Types.True }
                   BackEnd.IR.GE
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False BackEnd.IR.GE -> GHC.Types.True } }) -}
29a6c3cd3ea133857ec2f8677caa5fe0
  $fEqStm :: GHC.Classes.Eq BackEnd.IR.Stm
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BackEnd.IR.Stm BackEnd.IR.$fEqStm_$c== BackEnd.IR.$fEqStm_$c/= -}
29a6c3cd3ea133857ec2f8677caa5fe0
  $fEqStm_$c/= :: BackEnd.IR.Stm -> BackEnd.IR.Stm -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: BackEnd.IR.Stm) (b :: BackEnd.IR.Stm) ->
                 case BackEnd.IR.$fEqStm_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
29a6c3cd3ea133857ec2f8677caa5fe0
  $fEqStm_$c== :: BackEnd.IR.Stm -> BackEnd.IR.Stm -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
c232f4131e5ba3b186ce94934966b167
  $fShowBOp :: GHC.Show.Show BackEnd.IR.BOp
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BackEnd.IR.BOp
                  BackEnd.IR.$fShowBOp_$cshowsPrec
                  BackEnd.IR.$fShowBOp_$cshow
                  BackEnd.IR.$fShowBOp_$cshowList -}
aa7b629fc1bc18423e04726c698a8d71
  $fShowBOp1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MOD"#) -}
02d3dbea1fac3784041503dee6e0f84a
  $fShowBOp2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "RSHIFT"#) -}
f4b44c6c312211e97df0773a8332bec3
  $fShowBOp3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LSHIFT"#) -}
73e3d9337b9de1e049854effa0d36c74
  $fShowBOp4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OR"#) -}
a00f6d96535bb29a73b4099647a9a22e
  $fShowBOp5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AND"#) -}
6b07d8c2e182e30c49a7ed8749b76a92
  $fShowBOp6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DIV"#) -}
280e5bfad8664158057e3e8349e334fd
  $fShowBOp7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MUL"#) -}
2723a19fd2703db644360d9501c19aa5
  $fShowBOp8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MINUS"#) -}
1802f3590284fd73be20c7a0190bbfc1
  $fShowBOp9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PLUS"#) -}
c232f4131e5ba3b186ce94934966b167
  $fShowBOp_$cshow :: BackEnd.IR.BOp -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: BackEnd.IR.BOp) ->
                 BackEnd.IR.$fShowBOp_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
c232f4131e5ba3b186ce94934966b167
  $fShowBOp_$cshowList :: [BackEnd.IR.BOp] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ BackEnd.IR.BOp
                   BackEnd.IR.$w$cshowsPrec) -}
c232f4131e5ba3b186ce94934966b167
  $fShowBOp_$cshowsPrec ::
    GHC.Types.Int -> BackEnd.IR.BOp -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: BackEnd.IR.BOp)
                   (w2 :: GHC.Base.String) ->
                 BackEnd.IR.$w$cshowsPrec w1 w2) -}
29a6c3cd3ea133857ec2f8677caa5fe0
  $fShowExp :: GHC.Show.Show BackEnd.IR.Exp
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BackEnd.IR.Exp
                  BackEnd.IR.$fShowExp_$cshowsPrec
                  BackEnd.IR.$fShowExp_$cshow
                  BackEnd.IR.$fShowExp_$cshowList -}
29a6c3cd3ea133857ec2f8677caa5fe0
  $fShowExp1 :: BackEnd.IR.Exp -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ (x :: BackEnd.IR.Exp)
                   (s :: GHC.Base.String)[OneShot] ->
                 case BackEnd.IR.$w$ctoTree x of ww { (#,#) ww1 ww2 ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (Data.OldList.unlines
                      (GHC.Types.:
                         @ GHC.Base.String
                         ww1
                         (Data.Tree.drawTree_drawSubTrees ww2)))
                   s }) -}
29a6c3cd3ea133857ec2f8677caa5fe0
  $fShowExp_$cshow :: BackEnd.IR.Exp -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (e :: BackEnd.IR.Exp) ->
                 case BackEnd.IR.$fShowExp_$ctoTree
                        e of wild { Data.Tree.Node x1 ts0 ->
                 Data.OldList.unlines
                   (GHC.Types.:
                      @ GHC.Base.String
                      x1
                      (Data.Tree.drawTree_drawSubTrees ts0)) }) -}
29a6c3cd3ea133857ec2f8677caa5fe0
  $fShowExp_$cshowList :: [BackEnd.IR.Exp] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (ls :: [BackEnd.IR.Exp]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ BackEnd.IR.Exp BackEnd.IR.$fShowExp1 ls s) -}
29a6c3cd3ea133857ec2f8677caa5fe0
  $fShowExp_$cshowsPrec ::
    GHC.Types.Int -> BackEnd.IR.Exp -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: BackEnd.IR.Exp)
                   (w2 :: GHC.Base.String) ->
                 BackEnd.IR.$w$cshowsPrec1 w1 w2) -}
29a6c3cd3ea133857ec2f8677caa5fe0
  $fShowExp_$ctoTree ::
    BackEnd.IR.Exp -> Data.Tree.Tree GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: BackEnd.IR.Exp) ->
                 case BackEnd.IR.$w$ctoTree w of ww { (#,#) ww1 ww2 ->
                 Data.Tree.Node @ GHC.Base.String ww1 ww2 }) -}
2106592c3ca9d65fb59030dc1bff8b4a
  $fShowROp :: GHC.Show.Show BackEnd.IR.ROp
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BackEnd.IR.ROp
                  BackEnd.IR.$fShowROp_$cshowsPrec
                  BackEnd.IR.$fShowROp_$cshow
                  BackEnd.IR.$fShowROp_$cshowList -}
912afefd0af7e7b5c154046066605480
  $fShowROp1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "GE"#) -}
28acbc34decdf82469eeaab847affdc7
  $fShowROp2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "GT"#) -}
de54af5d0a35ac8548c1456775772d65
  $fShowROp3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LE"#) -}
c318781a16306c2b2e94cd8162e6879f
  $fShowROp4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LT"#) -}
768be47dd97146fb4a28c1589b313fe5
  $fShowROp5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NE"#) -}
d54ff18b12f380edf0c304a47a0e023b
  $fShowROp6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "EQ"#) -}
2106592c3ca9d65fb59030dc1bff8b4a
  $fShowROp_$cshow :: BackEnd.IR.ROp -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: BackEnd.IR.ROp) ->
                 BackEnd.IR.$fShowROp_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
2106592c3ca9d65fb59030dc1bff8b4a
  $fShowROp_$cshowList :: [BackEnd.IR.ROp] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ BackEnd.IR.ROp
                   BackEnd.IR.$w$cshowsPrec2) -}
2106592c3ca9d65fb59030dc1bff8b4a
  $fShowROp_$cshowsPrec ::
    GHC.Types.Int -> BackEnd.IR.ROp -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: BackEnd.IR.ROp)
                   (w2 :: GHC.Base.String) ->
                 BackEnd.IR.$w$cshowsPrec2 w1 w2) -}
29a6c3cd3ea133857ec2f8677caa5fe0
  $fShowStm :: GHC.Show.Show BackEnd.IR.Stm
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BackEnd.IR.Stm
                  BackEnd.IR.$fShowStm_$cshowsPrec
                  BackEnd.IR.$fShowStm_$cshow
                  BackEnd.IR.$fShowStm_$cshowList -}
29a6c3cd3ea133857ec2f8677caa5fe0
  $fShowStm1 :: BackEnd.IR.Stm -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ (x :: BackEnd.IR.Stm)
                   (s :: GHC.Base.String)[OneShot] ->
                 case BackEnd.IR.$w$ctoTree1 x of ww { (#,#) ww1 ww2 ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (Data.OldList.unlines
                      (GHC.Types.:
                         @ GHC.Base.String
                         ww1
                         (Data.Tree.drawTree_drawSubTrees ww2)))
                   s }) -}
29a6c3cd3ea133857ec2f8677caa5fe0
  $fShowStm_$cshow :: BackEnd.IR.Stm -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (stm :: BackEnd.IR.Stm) ->
                 case BackEnd.IR.$fShowStm_$ctoTree
                        stm of wild { Data.Tree.Node x1 ts0 ->
                 Data.OldList.unlines
                   (GHC.Types.:
                      @ GHC.Base.String
                      x1
                      (Data.Tree.drawTree_drawSubTrees ts0)) }) -}
29a6c3cd3ea133857ec2f8677caa5fe0
  $fShowStm_$cshowList :: [BackEnd.IR.Stm] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (ls :: [BackEnd.IR.Stm]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ BackEnd.IR.Stm BackEnd.IR.$fShowStm1 ls s) -}
29a6c3cd3ea133857ec2f8677caa5fe0
  $fShowStm_$cshowsPrec ::
    GHC.Types.Int -> BackEnd.IR.Stm -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: BackEnd.IR.Stm)
                   (w2 :: GHC.Base.String) ->
                 BackEnd.IR.$w$cshowsPrec3 w1 w2) -}
29a6c3cd3ea133857ec2f8677caa5fe0
  $fShowStm_$ctoTree ::
    BackEnd.IR.Stm -> Data.Tree.Tree GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: BackEnd.IR.Stm) ->
                 case BackEnd.IR.$w$ctoTree1 w of ww { (#,#) ww1 ww2 ->
                 Data.Tree.Node @ GHC.Base.String ww1 ww2 }) -}
f1fca7737c081ee53d08bb1d357f1574
  $fTreeableExp :: BackEnd.IR.Treeable BackEnd.IR.Exp
  DFunId
  {- Arity: 1, Strictness: <S,1*U>m, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                BackEnd.IR.$fShowExp_$ctoTree
                  `cast`
                (Sym (BackEnd.IR.N:Treeable[0] <BackEnd.IR.Exp>_N)) -}
f1fca7737c081ee53d08bb1d357f1574
  $fTreeableStm :: BackEnd.IR.Treeable BackEnd.IR.Stm
  DFunId
  {- Arity: 1, Strictness: <S,1*U>m, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                BackEnd.IR.$fShowStm_$ctoTree
                  `cast`
                (Sym (BackEnd.IR.N:Treeable[0] <BackEnd.IR.Stm>_N)) -}
81157d68b29a517e35eb4b8dc42fc583
  $tc'AND :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11766882912672651184##
                   17514898225167439405##
                   BackEnd.IR.$trModule
                   BackEnd.IR.$tc'AND1) -}
697b404d2c75d815775151c4aace865f
  $tc'AND1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'AND"#) -}
9b6883d992951b95103438815b52a2ad
  $tc'BINEXP :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5824756798835859667##
                   1118075124920489762##
                   BackEnd.IR.$trModule
                   BackEnd.IR.$tc'BINEXP1) -}
2936c28b35c50836c80e5ed092703773
  $tc'BINEXP1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'BINEXP"#) -}
27abdc98d5450f5cf5593c0aea0da5e9
  $tc'C:Treeable :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7724499076917014830##
                   10591775573393762336##
                   BackEnd.IR.$trModule
                   BackEnd.IR.$tc'C:Treeable1) -}
35169d020679aca15d7beedaff4c687a
  $tc'C:Treeable1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:Treeable"#) -}
7a323b7688213f77a3765a62961edba7
  $tc'CALL :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6112592279936130885##
                   15738764092862396765##
                   BackEnd.IR.$trModule
                   BackEnd.IR.$tc'CALL1) -}
922ea6f394574d5bd9b7384995cf24e7
  $tc'CALL1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'CALL"#) -}
0d78ca33aa9f7e0241154ef3a0bfe54f
  $tc'CJUMP :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16391993558139366931##
                   12087633098472845895##
                   BackEnd.IR.$trModule
                   BackEnd.IR.$tc'CJUMP1) -}
28583b0da1b997904890192316aa79ec
  $tc'CJUMP1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'CJUMP"#) -}
e026899f2b5b865a26e06620a5fb18d0
  $tc'CONSTC :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3146132024216877951##
                   3462902570414170941##
                   BackEnd.IR.$trModule
                   BackEnd.IR.$tc'CONSTC1) -}
27d7d5908bae1a039b132d446f9364a0
  $tc'CONSTC1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'CONSTC"#) -}
5011185d2a222c099c783ddfd779f89a
  $tc'CONSTI :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5709809530372240348##
                   8038053585823241761##
                   BackEnd.IR.$trModule
                   BackEnd.IR.$tc'CONSTI1) -}
5ea03f7f21faee42b7be3d8f77c8a676
  $tc'CONSTI1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'CONSTI"#) -}
5cede4142356d74b1849d9e8056ab790
  $tc'DIV :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4850618234403821856##
                   1441033283008983679##
                   BackEnd.IR.$trModule
                   BackEnd.IR.$tc'DIV1) -}
43f4a1b2d2934026032008c3fac9d5c6
  $tc'DIV1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'DIV"#) -}
cc44b4c61c9981fb5455c54365b396c7
  $tc'EQ :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17197355509389424388##
                   16282110777846188405##
                   BackEnd.IR.$trModule
                   BackEnd.IR.$tc'EQ1) -}
a7ea06260cfc3c02efa031d3d88fc2b4
  $tc'EQ1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'EQ"#) -}
8feb9526c885c2d982ee2c8bb2e383f4
  $tc'ESEQ :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5540589306151023688##
                   337113540044099686##
                   BackEnd.IR.$trModule
                   BackEnd.IR.$tc'ESEQ1) -}
688bba0f53c2f591201c6bf590b8153f
  $tc'ESEQ1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ESEQ"#) -}
abe62561422e9aacae1c8014a5267fed
  $tc'EXP :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5949162628940473712##
                   1254041679947173573##
                   BackEnd.IR.$trModule
                   BackEnd.IR.$tc'EXP1) -}
3d4f523df68a2210940ad931a7e658a2
  $tc'EXP1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'EXP"#) -}
a1e9401db8ed94c91e5eb9d4071c5b28
  $tc'GE :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12572087156335252105##
                   15870282613133224181##
                   BackEnd.IR.$trModule
                   BackEnd.IR.$tc'GE1) -}
cc14fa7a0980c71f307b6772c41e1ece
  $tc'GE1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'GE"#) -}
97b9ea7ec67c9e3dbd390e2da8bddc9b
  $tc'GT :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7023748046200221603##
                   7997913255778556416##
                   BackEnd.IR.$trModule
                   BackEnd.IR.$tc'GT1) -}
3f5a631f195508c2a508b977a67c3f05
  $tc'GT1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'GT"#) -}
1303330ee74995962612de177a62b1ba
  $tc'JUMP :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15425017470933827544##
                   5595704551196863262##
                   BackEnd.IR.$trModule
                   BackEnd.IR.$tc'JUMP1) -}
495c0eae7f679dd279c527ff7c70ad73
  $tc'JUMP1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'JUMP"#) -}
f2c79ebf2cdb8367d4b1c3dac720718c
  $tc'LABEL :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13525290528615485903##
                   10920675937257140663##
                   BackEnd.IR.$trModule
                   BackEnd.IR.$tc'LABEL1) -}
d75925fb2f5a2f651145cb2a9caa7bd3
  $tc'LABEL1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'LABEL"#) -}
cc94d02d06decd5e0dbbef88e914eb37
  $tc'LE :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   763272067700441099##
                   13404072261064363664##
                   BackEnd.IR.$trModule
                   BackEnd.IR.$tc'LE1) -}
fc7b52bfd455034b8d6957fecfdf02fe
  $tc'LE1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'LE"#) -}
b105d47d89fdb58e0aecb9195a7e70e9
  $tc'LSHIFT :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6854850818488759915##
                   11305337528109818189##
                   BackEnd.IR.$trModule
                   BackEnd.IR.$tc'LSHIFT1) -}
b36c57b45ae09855dc5bbb4875dfb207
  $tc'LSHIFT1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'LSHIFT"#) -}
d2e912a4ac312af057738c0dd4121a26
  $tc'LT :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16732747317142867551##
                   16729292219904957482##
                   BackEnd.IR.$trModule
                   BackEnd.IR.$tc'LT1) -}
abe81d96b1d754e01db319cc96056a8d
  $tc'LT1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'LT"#) -}
c931376ed7e0229f5f9b1781c8899045
  $tc'MEM :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4263891799582832762##
                   15930391544809632437##
                   BackEnd.IR.$trModule
                   BackEnd.IR.$tc'MEM1) -}
120f9933ac3c713fddd76e6b8e640331
  $tc'MEM1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'MEM"#) -}
06d55c062c4b683227a75d4c8ccfa345
  $tc'MINUS :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   158869577821365312##
                   4716339062644461897##
                   BackEnd.IR.$trModule
                   BackEnd.IR.$tc'MINUS1) -}
012b6e6b895ba4f629e95776b4c866dc
  $tc'MINUS1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'MINUS"#) -}
24299fbfc31f9714b6a5cb40c2c98a7e
  $tc'MOD :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11955080443375779757##
                   12021882654975080266##
                   BackEnd.IR.$trModule
                   BackEnd.IR.$tc'MOD1) -}
fc22ab7185623ade9b95ef3111ee5d43
  $tc'MOD1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'MOD"#) -}
443e722530aeac7b3302775ee2ea0339
  $tc'MOV :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16493155278058122148##
                   5788696624569424691##
                   BackEnd.IR.$trModule
                   BackEnd.IR.$tc'MOV1) -}
b17c6dbf27934025a59ad110d4a89506
  $tc'MOV1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'MOV"#) -}
97118fe9ebacc8e7c30a27f0ebdba500
  $tc'MUL :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4493526278523081289##
                   177499720782958333##
                   BackEnd.IR.$trModule
                   BackEnd.IR.$tc'MUL1) -}
d4f34f4be6b2b057eee21283d02aa265
  $tc'MUL1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'MUL"#) -}
142012e8846d3389d91758aff50dc23c
  $tc'NAME :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2772773313282953436##
                   14328067384343445766##
                   BackEnd.IR.$trModule
                   BackEnd.IR.$tc'NAME1) -}
985ffb6b8d75f1094bed3617cbdfdffc
  $tc'NAME1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NAME"#) -}
da559bd46f78fa6d2389745a84665839
  $tc'NE :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12363832309888276790##
                   10721003028487687316##
                   BackEnd.IR.$trModule
                   BackEnd.IR.$tc'NE1) -}
f776e4b67773fe59ffd9de75544ff3c5
  $tc'NE1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NE"#) -}
53f609e0f7268b90f368448f20558702
  $tc'NOP :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14041299619268255408##
                   385602141553069295##
                   BackEnd.IR.$trModule
                   BackEnd.IR.$tc'NOP1) -}
8b753bf17b227486bfa38d093c6f92b3
  $tc'NOP1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NOP"#) -}
62a8e71ac9d1168f8d4c07afc8a21838
  $tc'OR :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2884433771962037047##
                   3474326850156296979##
                   BackEnd.IR.$trModule
                   BackEnd.IR.$tc'OR1) -}
961d350fa6f01c993f4231e0008745b8
  $tc'OR1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'OR"#) -}
fb61972f78e643657d475623280159a1
  $tc'PLUS :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7735392187915614692##
                   10838418507188322567##
                   BackEnd.IR.$trModule
                   BackEnd.IR.$tc'PLUS1) -}
a6f46c66260e5f8f0fab7c6a3e7532e8
  $tc'PLUS1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PLUS"#) -}
2410fddedbb619489b72e4190504c69c
  $tc'POP :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15680745719085845891##
                   1054034508228274768##
                   BackEnd.IR.$trModule
                   BackEnd.IR.$tc'POP1) -}
e44707e02b0e53236b693b66b17f9451
  $tc'POP1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'POP"#) -}
1b26d6df7967d63a91a4b7f4063cfc32
  $tc'PUSH :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3073624488333985918##
                   15477090975072866851##
                   BackEnd.IR.$trModule
                   BackEnd.IR.$tc'PUSH1) -}
7168df167b6e6feb621ac25d5bb1d4c9
  $tc'PUSH1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PUSH"#) -}
1618c4101636a85e37553b51259fbf04
  $tc'RSHIFT :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9896436538211625529##
                   13650331409373256854##
                   BackEnd.IR.$trModule
                   BackEnd.IR.$tc'RSHIFT1) -}
8b12c46f4a17efc40819946502bcf359
  $tc'RSHIFT1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'RSHIFT"#) -}
bf4b42ed3451057d12b72e3b9c153b2e
  $tc'SEQ :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14829432877462958672##
                   13177716594562879123##
                   BackEnd.IR.$trModule
                   BackEnd.IR.$tc'SEQ1) -}
1610eb192df46d3bb9ffe0338d613ee4
  $tc'SEQ1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SEQ"#) -}
a0d5542f5ca8e543e8a4e7171063221d
  $tc'TEMP :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6851498319064705795##
                   12855178404483998254##
                   BackEnd.IR.$trModule
                   BackEnd.IR.$tc'TEMP1) -}
448b272834d5f5fd74d6cb730e998915
  $tc'TEMP1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TEMP"#) -}
361578ff5f32521afe4cb07d1a93e235
  $tcBOp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18113482976825363370##
                   3127736258749762021##
                   BackEnd.IR.$trModule
                   BackEnd.IR.$tcBOp1) -}
05b5765948f40afdde8f14abbdaf145e
  $tcBOp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "BOp"#) -}
c171d2c39cd16f908948b1823bcc3bf3
  $tcExp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17017118563983961270##
                   7421760872425287399##
                   BackEnd.IR.$trModule
                   BackEnd.IR.$tcExp1) -}
1f0ee8337ca71199560b0169ce4fd638
  $tcExp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Exp"#) -}
b5ee8aef104d4ba29d4bcebe1962735b
  $tcROp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7915631287674340147##
                   11709289390739528047##
                   BackEnd.IR.$trModule
                   BackEnd.IR.$tcROp1) -}
9a01016706ed318f3fbd43b93c5aba49
  $tcROp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "ROp"#) -}
6ef0fa7bad783bed85a67cf57aab1ab8
  $tcStm :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   394320124604333882##
                   13269455903828644656##
                   BackEnd.IR.$trModule
                   BackEnd.IR.$tcStm1) -}
ed674567f7c25703ce9938a24cad766c
  $tcStm1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Stm"#) -}
18a2811fd76bac37c08383bc78fecc3b
  $tcTreeable :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13203305838034177935##
                   2038830219673266044##
                   BackEnd.IR.$trModule
                   BackEnd.IR.$tcTreeable1) -}
b8f6f50325f10bfff35d84daa58cca86
  $tcTreeable1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Treeable"#) -}
728686a0a0aa5968831a4bb3523d4507
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   BackEnd.IR.$trModule2
                   BackEnd.IR.$trModule1) -}
4ff22cc54de747d5bf455e7fdfae93b9
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "BackEnd.IR"#) -}
ff9b65a70963ed6d432c0cd3ec76b003
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "wacc32-0.1.0.0-3oOtzXerc607YIePR0qNZ2"#) -}
c232f4131e5ba3b186ce94934966b167
  $w$cshowsPrec ::
    BackEnd.IR.BOp -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: BackEnd.IR.BOp) (w1 :: GHC.Base.String) ->
                 case w of wild {
                   BackEnd.IR.PLUS
                   -> GHC.Base.++ @ GHC.Types.Char BackEnd.IR.$fShowBOp9 w1
                   BackEnd.IR.MINUS
                   -> GHC.Base.++ @ GHC.Types.Char BackEnd.IR.$fShowBOp8 w1
                   BackEnd.IR.MUL
                   -> GHC.Base.++ @ GHC.Types.Char BackEnd.IR.$fShowBOp7 w1
                   BackEnd.IR.DIV
                   -> GHC.Base.++ @ GHC.Types.Char BackEnd.IR.$fShowBOp6 w1
                   BackEnd.IR.AND
                   -> GHC.Base.++ @ GHC.Types.Char BackEnd.IR.$fShowBOp5 w1
                   BackEnd.IR.OR
                   -> GHC.Base.++ @ GHC.Types.Char BackEnd.IR.$fShowBOp4 w1
                   BackEnd.IR.LSHIFT
                   -> GHC.Base.++ @ GHC.Types.Char BackEnd.IR.$fShowBOp3 w1
                   BackEnd.IR.RSHIFT
                   -> GHC.Base.++ @ GHC.Types.Char BackEnd.IR.$fShowBOp2 w1
                   BackEnd.IR.MOD
                   -> GHC.Base.++ @ GHC.Types.Char BackEnd.IR.$fShowBOp1 w1 }) -}
29a6c3cd3ea133857ec2f8677caa5fe0
  $w$cshowsPrec1 ::
    BackEnd.IR.Exp -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: BackEnd.IR.Exp) (w1 :: GHC.Base.String) ->
                 case BackEnd.IR.$w$ctoTree w of ww { (#,#) ww1 ww2 ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (Data.OldList.unlines
                      (GHC.Types.:
                         @ GHC.Base.String
                         ww1
                         (Data.Tree.drawTree_drawSubTrees ww2)))
                   w1 }) -}
2106592c3ca9d65fb59030dc1bff8b4a
  $w$cshowsPrec2 ::
    BackEnd.IR.ROp -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: BackEnd.IR.ROp) (w1 :: GHC.Base.String) ->
                 case w of wild {
                   BackEnd.IR.EQ
                   -> GHC.Base.++ @ GHC.Types.Char BackEnd.IR.$fShowROp6 w1
                   BackEnd.IR.NE
                   -> GHC.Base.++ @ GHC.Types.Char BackEnd.IR.$fShowROp5 w1
                   BackEnd.IR.LT
                   -> GHC.Base.++ @ GHC.Types.Char BackEnd.IR.$fShowROp4 w1
                   BackEnd.IR.LE
                   -> GHC.Base.++ @ GHC.Types.Char BackEnd.IR.$fShowROp3 w1
                   BackEnd.IR.GT
                   -> GHC.Base.++ @ GHC.Types.Char BackEnd.IR.$fShowROp2 w1
                   BackEnd.IR.GE
                   -> GHC.Base.++ @ GHC.Types.Char BackEnd.IR.$fShowROp1 w1 }) -}
29a6c3cd3ea133857ec2f8677caa5fe0
  $w$cshowsPrec3 ::
    BackEnd.IR.Stm -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: BackEnd.IR.Stm) (w1 :: GHC.Base.String) ->
                 case BackEnd.IR.$w$ctoTree1 w of ww { (#,#) ww1 ww2 ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (Data.OldList.unlines
                      (GHC.Types.:
                         @ GHC.Base.String
                         ww1
                         (Data.Tree.drawTree_drawSubTrees ww2)))
                   w1 }) -}
29a6c3cd3ea133857ec2f8677caa5fe0
  $w$ctoTree ::
    BackEnd.IR.Exp
    -> (# GHC.Base.String, Data.Tree.Forest GHC.Base.String #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
29a6c3cd3ea133857ec2f8677caa5fe0
  $w$ctoTree1 ::
    BackEnd.IR.Stm
    -> (# GHC.Base.String, Data.Tree.Forest GHC.Base.String #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
c232f4131e5ba3b186ce94934966b167
  data BOp
    = PLUS | MINUS | MUL | DIV | AND | OR | LSHIFT | RSHIFT | MOD
29a6c3cd3ea133857ec2f8677caa5fe0
  data Exp
    = CONSTI GHC.Types.Int
    | CONSTC GHC.Types.Char
    | NAME BackEnd.Temp.Label
    | TEMP BackEnd.Temp.Temp
    | BINEXP BackEnd.IR.BOp BackEnd.IR.Exp BackEnd.IR.Exp
    | MEM BackEnd.IR.Exp
    | CALL BackEnd.IR.Exp [BackEnd.IR.Exp]
    | ESEQ BackEnd.IR.Stm BackEnd.IR.Exp
2106592c3ca9d65fb59030dc1bff8b4a
  data ROp = EQ | NE | LT | LE | GT | GE
29a6c3cd3ea133857ec2f8677caa5fe0
  data Stm
    = MOV BackEnd.IR.Exp BackEnd.IR.Exp
    | JUMP BackEnd.IR.Exp [BackEnd.Temp.Label]
    | EXP BackEnd.IR.Exp
    | CJUMP BackEnd.IR.ROp
            BackEnd.IR.Exp
            BackEnd.IR.Exp
            BackEnd.Temp.Label
            BackEnd.Temp.Label
    | SEQ BackEnd.IR.Stm BackEnd.IR.Stm
    | LABEL BackEnd.Temp.Label
    | PUSH BackEnd.IR.Exp
    | POP BackEnd.IR.Exp
    | NOP
f1fca7737c081ee53d08bb1d357f1574
  class Treeable a where
    toTree :: a -> Data.Tree.Tree GHC.Base.String
    {-# MINIMAL toTree #-}
5eccbb71b13e0b4437357a0ceb01a059
  cleanStm :: BackEnd.IR.Stm -> BackEnd.IR.Stm
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
41aaa41a3724ee3d4c3f223450c25627
  cleanStmExp :: BackEnd.IR.Exp -> BackEnd.IR.Exp
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
instance [safe] GHC.Classes.Eq [BackEnd.IR.BOp]
  = BackEnd.IR.$fEqBOp
instance [safe] GHC.Classes.Eq [BackEnd.IR.Exp]
  = BackEnd.IR.$fEqExp
instance [safe] GHC.Classes.Eq [BackEnd.IR.ROp]
  = BackEnd.IR.$fEqROp
instance [safe] GHC.Classes.Eq [BackEnd.IR.Stm]
  = BackEnd.IR.$fEqStm
instance [safe] GHC.Show.Show [BackEnd.IR.BOp]
  = BackEnd.IR.$fShowBOp
instance [safe] GHC.Show.Show [BackEnd.IR.Exp]
  = BackEnd.IR.$fShowExp
instance [safe] GHC.Show.Show [BackEnd.IR.ROp]
  = BackEnd.IR.$fShowROp
instance [safe] GHC.Show.Show [BackEnd.IR.Stm]
  = BackEnd.IR.$fShowStm
instance [safe] BackEnd.IR.Treeable [BackEnd.IR.Exp]
  = BackEnd.IR.$fTreeableExp
instance [safe] BackEnd.IR.Treeable [BackEnd.IR.Stm]
  = BackEnd.IR.$fTreeableStm
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

