
==================== FINAL INTERFACE ====================
2019-02-27 09:56:05.561462929 UTC

interface wacc32-0.1.0.0-3oOtzXerc607YIePR0qNZ2:BackEnd.FlowGraph 8002
  interface hash: 909ddae623d42f51a5581d3bb79fc8c4
  ABI hash: 747b8b437b24c9af1bebae836d754b4b
  export-list hash: ff14a2b93ea1ff77ba8cddccd0fdae58
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 02b3c746106ad76f793f89ebc1f71840
  sig of: Nothing
  used TH splices: False
  where
exports:
  BackEnd.FlowGraph.newFlowGraph
  BackEnd.FlowGraph.FlowGraph{BackEnd.FlowGraph.FlowGraph assems control def nodes use}
  BackEnd.FlowGraph.JUMP{BackEnd.FlowGraph.JumpFall BackEnd.FlowGraph.JustJump}
module dependencies: BackEnd.Assem BackEnd.IR BackEnd.Instructions
                     BackEnd.Temp
package dependencies: algebraic-graphs-0.3@algebraic-graphs-0.3-GMNCI0iOPDY8oGrd7FmxLZ
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      base-compat-0.10.5@base-compat-0.10.5-3zaoBe0vBrBwuLLp8tD2A
                      binary-0.8.3.0@binary-0.8.3.0
                      boxes-0.1.5@boxes-0.1.5-6DdHE3jJ0TwE6WTwMdCW4f
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      generic-deriving-1.12.3@generic-deriving-1.12.3-HPQduUg70uzIWqANLW8iZn
                      ghc-prim-0.5.0.0
                      hashable-1.2.7.0@hashable-1.2.7.0-3Ov9NDiX2mfFTkc4fiCKfa
                      hashmap-1.3.3@hashmap-1.3.3-6F5MsgNDasO6fIeStnUOf6
                      integer-gmp-1.0.0.1
                      pretty-tree-0.1.0.0@pretty-tree-0.1.0.0-5ldf01HzJj05FtOtje7CSt
                      split-0.2.3.3@split-0.2.3.3-KPq5EVv6rbi8XHTA0KJd3E
                      text-1.2.3.1@text-1.2.3.1-FiKShuz66xXAoRKdCDhKNQ
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         generic-deriving-1.12.3@generic-deriving-1.12.3-HPQduUg70uzIWqANLW8iZn:Generics.Deriving.Instances
         hashable-1.2.7.0@hashable-1.2.7.0-3Ov9NDiX2mfFTkc4fiCKfa:Data.Hashable.Generic
         text-1.2.3.1@text-1.2.3.1-FiKShuz66xXAoRKdCDhKNQ:Data.Text
         text-1.2.3.1@text-1.2.3.1-FiKShuz66xXAoRKdCDhKNQ:Data.Text.Lazy
         text-1.2.3.1@text-1.2.3.1-FiKShuz66xXAoRKdCDhKNQ:Data.Text.Show
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Compose base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         generic-deriving-1.12.3@generic-deriving-1.12.3-HPQduUg70uzIWqANLW8iZn:Generics.Deriving.Instances
                         text-1.2.3.1@text-1.2.3.1-FiKShuz66xXAoRKdCDhKNQ:Data.Text
                         text-1.2.3.1@text-1.2.3.1-FiKShuz66xXAoRKdCDhKNQ:Data.Text.Lazy
                         wacc32-0.1.0.0-3oOtzXerc607YIePR0qNZ2:BackEnd.Instructions
import  -/  algebraic-graphs-0.3@algebraic-graphs-0.3-GMNCI0iOPDY8oGrd7FmxLZ:Algebra.Graph.AdjacencyMap 9c3cc63ba4118d5a8c498c56641d3e52
import  -/  algebraic-graphs-0.3@algebraic-graphs-0.3-GMNCI0iOPDY8oGrd7FmxLZ:Algebra.Graph.AdjacencyMap.Internal eeb4eb1f6d3b1ced04cfad8445985111
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  hashmap-1.3.3@hashmap-1.3.3-6F5MsgNDasO6fIeStnUOf6:Data.HashMap 21c21e30ca661fd288861556f5a56e8d
import  -/  BackEnd.Assem 0c2dd4117304a7718bc4adf283ae5e64
  exports: 4e4b66683d488fa10cb15dfdfb0d7eda
  Instr 7e9a983e644f74c95e69c7397c53736a
import  -/  BackEnd.Temp 0c22f42d627493b2b3f13cd2a3ac5a46
  exports: ecf0e74365e1a70f2572e5197e175ea3
  Temp 14024289252e98b781eb5778cbac8848
3f52d0def1ba30258027078a2a9cec6e
  $fShowFlowGraph :: GHC.Show.Show BackEnd.FlowGraph.FlowGraph
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BackEnd.FlowGraph.FlowGraph
                  BackEnd.FlowGraph.$fShowFlowGraph_$cshowsPrec
                  BackEnd.FlowGraph.$fShowFlowGraph_$cshow
                  BackEnd.FlowGraph.$fShowFlowGraph_$cshowList -}
3f52d0def1ba30258027078a2a9cec6e
  $fShowFlowGraph1 :: BackEnd.FlowGraph.FlowGraph -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: BackEnd.FlowGraph.FlowGraph) ->
                 case w of ww { BackEnd.FlowGraph.FlowGraph ww1 ww2 ww3 ww4 ww5 ->
                 BackEnd.FlowGraph.$w$cshowsPrec 0# ww1 ww2 ww3 ww4 ww5 }) -}
3f52d0def1ba30258027078a2a9cec6e
  $fShowFlowGraph_$cshow ::
    BackEnd.FlowGraph.FlowGraph -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,1*U,1*U,U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: BackEnd.FlowGraph.FlowGraph) ->
                 BackEnd.FlowGraph.$fShowFlowGraph_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
3f52d0def1ba30258027078a2a9cec6e
  $fShowFlowGraph_$cshowList ::
    [BackEnd.FlowGraph.FlowGraph] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ BackEnd.FlowGraph.FlowGraph
                   BackEnd.FlowGraph.$fShowFlowGraph1) -}
3f52d0def1ba30258027078a2a9cec6e
  $fShowFlowGraph_$cshowsPrec ::
    GHC.Types.Int -> BackEnd.FlowGraph.FlowGraph -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U,1*U,1*U,U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: BackEnd.FlowGraph.FlowGraph) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { BackEnd.FlowGraph.FlowGraph ww3 ww4 ww5 ww6 ww7 ->
                 BackEnd.FlowGraph.$w$cshowsPrec ww1 ww3 ww4 ww5 ww6 ww7 } }) -}
6edd62c172a998b21ae0f4aef4987852
  $fShowJUMP :: GHC.Show.Show BackEnd.FlowGraph.JUMP
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BackEnd.FlowGraph.JUMP
                  BackEnd.FlowGraph.$fShowJUMP_$cshowsPrec
                  BackEnd.FlowGraph.$fShowJUMP_$cshow
                  BackEnd.FlowGraph.$fShowJUMP_$cshowList -}
6edd62c172a998b21ae0f4aef4987852
  $fShowJUMP1 :: BackEnd.FlowGraph.JUMP -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: BackEnd.FlowGraph.JUMP)
                   (w1 :: GHC.Base.String) ->
                 BackEnd.FlowGraph.$w$cshowsPrec1 0# w w1) -}
5908878a16b379477e1f29877d2a2f72
  $fShowJUMP2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "JumpFall "#) -}
c14fb2199648875d10699230475beedb
  $fShowJUMP3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "JustJump "#) -}
6edd62c172a998b21ae0f4aef4987852
  $fShowJUMP_$cshow :: BackEnd.FlowGraph.JUMP -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: BackEnd.FlowGraph.JUMP) ->
                 BackEnd.FlowGraph.$fShowJUMP_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
6edd62c172a998b21ae0f4aef4987852
  $fShowJUMP_$cshowList :: [BackEnd.FlowGraph.JUMP] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ BackEnd.FlowGraph.JUMP
                   BackEnd.FlowGraph.$fShowJUMP1) -}
6edd62c172a998b21ae0f4aef4987852
  $fShowJUMP_$cshowsPrec ::
    GHC.Types.Int -> BackEnd.FlowGraph.JUMP -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: BackEnd.FlowGraph.JUMP)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 BackEnd.FlowGraph.$w$cshowsPrec1 ww1 w1 w2 }) -}
0614f470b351cd104c8410b58b521229
  $tc'FlowGraph :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5783074387790914539##
                   1670003662637230805##
                   BackEnd.FlowGraph.$trModule
                   BackEnd.FlowGraph.$tc'FlowGraph1) -}
bb408a18b30551e063a3ab4aa9052df1
  $tc'FlowGraph1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'FlowGraph"#) -}
6b765f444b9da8912ac308d70d340ce6
  $tc'JumpFall :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8392755899700125603##
                   10152596411527799902##
                   BackEnd.FlowGraph.$trModule
                   BackEnd.FlowGraph.$tc'JumpFall1) -}
d5db0c3599f57fcf737a9a61f39908f3
  $tc'JumpFall1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'JumpFall"#) -}
a32708afd706b06ac7f8541a10015e63
  $tc'JustJump :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15575286705896554349##
                   17111232183447908517##
                   BackEnd.FlowGraph.$trModule
                   BackEnd.FlowGraph.$tc'JustJump1) -}
fa32d84c4a4b0e72c00e21016daeae93
  $tc'JustJump1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'JustJump"#) -}
2db9db7cd8b086d817006d9795e0ec1b
  $tcFlowGraph :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1716118475245598387##
                   707061615412403136##
                   BackEnd.FlowGraph.$trModule
                   BackEnd.FlowGraph.$tcFlowGraph1) -}
4ac21eb84b781fa93739a39814fb07f9
  $tcFlowGraph1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "FlowGraph"#) -}
c831e6165c78f70b34f653fa962f74ec
  $tcJUMP :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14561256355936670991##
                   11889905781408357070##
                   BackEnd.FlowGraph.$trModule
                   BackEnd.FlowGraph.$tcJUMP1) -}
701062f1006f04dbf07802212aea7a38
  $tcJUMP1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "JUMP"#) -}
4036c1893542aed0de990a8c5f86872e
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   BackEnd.FlowGraph.$trModule2
                   BackEnd.FlowGraph.$trModule1) -}
6bbab1fb76a2be886382717f7d174d55
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "BackEnd.FlowGraph"#) -}
a92bffa1c66e9140fd87116963adf748
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "wacc32-0.1.0.0-3oOtzXerc607YIePR0qNZ2"#) -}
e0cfe13627c154fa3ca46fa8e7330718
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Algebra.Graph.AdjacencyMap.Internal.AdjacencyMap GHC.Types.Int
    -> Data.HashMap.Map GHC.Types.Int [BackEnd.Temp.Temp]
    -> Data.HashMap.Map GHC.Types.Int [BackEnd.Temp.Temp]
    -> [GHC.Types.Int]
    -> Data.HashMap.Map GHC.Types.Int BackEnd.Assem.Instr
    -> GHC.Show.ShowS
  {- Arity: 6, Strictness: <S,U><L,U><L,1*U><L,1*U><L,U><L,1*U>,
     Inline: [0] -}
6edd62c172a998b21ae0f4aef4987852
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> BackEnd.FlowGraph.JUMP -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: BackEnd.FlowGraph.JUMP)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   BackEnd.FlowGraph.JustJump b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             BackEnd.FlowGraph.$fShowJUMP3
                             (GHC.Show.showList__
                                @ [GHC.Types.Char]
                                GHC.Show.shows_$cshowList1
                                b1
                                w1)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                BackEnd.FlowGraph.$fShowJUMP3
                                (GHC.Show.showList__
                                   @ [GHC.Types.Char]
                                   GHC.Show.shows_$cshowList1
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w1))) }
                   BackEnd.FlowGraph.JumpFall b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             BackEnd.FlowGraph.$fShowJUMP2
                             (GHC.Show.showList__
                                @ [GHC.Types.Char]
                                GHC.Show.shows_$cshowList1
                                b1
                                w1)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                BackEnd.FlowGraph.$fShowJUMP2
                                (GHC.Show.showList__
                                   @ [GHC.Types.Char]
                                   GHC.Show.shows_$cshowList1
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w1))) } }) -}
3f52d0def1ba30258027078a2a9cec6e
  data FlowGraph
    = FlowGraph {control :: Algebra.Graph.AdjacencyMap.Internal.AdjacencyMap
                              GHC.Types.Int,
                 def :: Data.HashMap.Map GHC.Types.Int [BackEnd.Temp.Temp],
                 use :: Data.HashMap.Map GHC.Types.Int [BackEnd.Temp.Temp],
                 nodes :: [GHC.Types.Int],
                 assems :: Data.HashMap.Map GHC.Types.Int BackEnd.Assem.Instr}
6edd62c172a998b21ae0f4aef4987852
  data JUMP = JustJump [GHC.Base.String] | JumpFall [GHC.Base.String]
ec4dec91ea1d553b9a69b88341d79a90
  assems ::
    BackEnd.FlowGraph.FlowGraph
    -> Data.HashMap.Map GHC.Types.Int BackEnd.Assem.Instr
  RecSel Left BackEnd.FlowGraph.FlowGraph
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLLS),1*U(A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: BackEnd.FlowGraph.FlowGraph) ->
                 case ds of wild { BackEnd.FlowGraph.FlowGraph ds1 ds2 ds3 ds4 ds5 ->
                 ds5 }) -}
e4c0dc84644c8c16b516d77ecff09cf5
  control ::
    BackEnd.FlowGraph.FlowGraph
    -> Algebra.Graph.AdjacencyMap.Internal.AdjacencyMap GHC.Types.Int
  RecSel Left BackEnd.FlowGraph.FlowGraph
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLLL),1*U(1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: BackEnd.FlowGraph.FlowGraph) ->
                 case ds of wild { BackEnd.FlowGraph.FlowGraph ds1 ds2 ds3 ds4 ds5 ->
                 ds1 }) -}
c348439c87efa3f7bc2f88d9cf95e060
  def ::
    BackEnd.FlowGraph.FlowGraph
    -> Data.HashMap.Map GHC.Types.Int [BackEnd.Temp.Temp]
  RecSel Left BackEnd.FlowGraph.FlowGraph
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLLL),1*U(A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: BackEnd.FlowGraph.FlowGraph) ->
                 case ds of wild { BackEnd.FlowGraph.FlowGraph ds1 ds2 ds3 ds4 ds5 ->
                 ds2 }) -}
97ed7286203597c6d86edde594487c01
  newFlowGraph :: BackEnd.FlowGraph.FlowGraph
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (BackEnd.FlowGraph.FlowGraph
                   (Data.Map.Base.Tip
                      @ GHC.Types.Int
                      @ (Data.Set.Base.Set GHC.Types.Int))
                     `cast`
                   (Sym (Algebra.Graph.AdjacencyMap.Internal.N:AdjacencyMap[0]
                             <GHC.Types.Int>_N))
                   (Data.IntMap.Base.Nil
                      @ (Data.HashMap.Some GHC.Types.Int [BackEnd.Temp.Temp]))
                     `cast`
                   (Sym (Data.HashMap.N:Map[0]
                             <GHC.Types.Int>_N <[BackEnd.Temp.Temp]>_R))
                   (Data.IntMap.Base.Nil
                      @ (Data.HashMap.Some GHC.Types.Int [BackEnd.Temp.Temp]))
                     `cast`
                   (Sym (Data.HashMap.N:Map[0]
                             <GHC.Types.Int>_N <[BackEnd.Temp.Temp]>_R))
                   (GHC.Types.[] @ GHC.Types.Int)
                   (Data.IntMap.Base.Nil
                      @ (Data.HashMap.Some GHC.Types.Int BackEnd.Assem.Instr))
                     `cast`
                   (Sym (Data.HashMap.N:Map[0]
                             <GHC.Types.Int>_N <BackEnd.Assem.Instr>_R))) -}
be99f6bb0a085e59a2c3d82270711090
  nodes :: BackEnd.FlowGraph.FlowGraph -> [GHC.Types.Int]
  RecSel Left BackEnd.FlowGraph.FlowGraph
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLSL),1*U(A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: BackEnd.FlowGraph.FlowGraph) ->
                 case ds of wild { BackEnd.FlowGraph.FlowGraph ds1 ds2 ds3 ds4 ds5 ->
                 ds4 }) -}
10813a79a025eacf2cff857b268c6d13
  use ::
    BackEnd.FlowGraph.FlowGraph
    -> Data.HashMap.Map GHC.Types.Int [BackEnd.Temp.Temp]
  RecSel Left BackEnd.FlowGraph.FlowGraph
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSLL),1*U(A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: BackEnd.FlowGraph.FlowGraph) ->
                 case ds of wild { BackEnd.FlowGraph.FlowGraph ds1 ds2 ds3 ds4 ds5 ->
                 ds3 }) -}
instance GHC.Show.Show [BackEnd.FlowGraph.FlowGraph]
  = BackEnd.FlowGraph.$fShowFlowGraph
instance GHC.Show.Show [BackEnd.FlowGraph.JUMP]
  = BackEnd.FlowGraph.$fShowJUMP
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

